name: CD

on:
  push:
    branches:
    - master
    paths-ignore:
    - 'README.md'
    - 'LICENSE-AGPLv3.txt'
    - 'CODE_OF_CONDUCT.md'
    - 'CONTRIBUTING.md'

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    container:
      image: elixir:1.11.3
    services:
      postgres:
        image: postgres:10.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: liquid_voting_test
        ports:
          - 5432:5432
        # postgres container doesn't provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v1
    - name: Install Dependencies
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get
    - name: Run Tests
      run: mix test
      env:
        MIX_ENV: test
        # refers to the service name, since we're running on containers
        POSTGRES_HOST: postgres

  linting:
    name: Linting
    runs-on: ubuntu-latest
    container:
      image: elixir:1.11.3
    steps:
    - uses: actions/checkout@v1
    - name: Install Dependencies
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get
    - name: Run Formatter
      run: mix format --check-formatted

  build-publish:
    name: Build & Publish Docker Image
    needs: [tests]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: docker.pkg.github.com/${{ github.repository }}/api
      TAG: ${{ github.sha }}
    steps:
    - uses: actions/checkout@v1
    - name: Build Image
      run: |
        docker build -t $IMAGE_NAME:$TAG .
        docker tag $IMAGE_NAME:$TAG $IMAGE_NAME:latest
    - name: Login to Github Registry
      uses: azure/docker-login@v1
      with:
        login-server: docker.pkg.github.com
        username: $GITHUB_ACTOR
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish Image
      run: |
        docker push $IMAGE_NAME

  deploy:
    name: Deploy to Linode
    needs: [build-publish]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Deploy
      env:
        KUBE_CONFIG_DATA: ${{ secrets.LINODE_KUBE_CONFIG }}
      run: |
        echo "$KUBE_CONFIG_DATA" | base64 --decode > /tmp/config
        export KUBECONFIG=/tmp/config
        kubectl rollout restart deployment/api-deployment
        pod=$(kubectl get pods -l app=api  -o json | jq -r '.items[].metadata.name' | head -1)
        kubectl wait --timeout=120s --for=condition=Ready pod/$pod
        kubectl exec -i pod/$pod \
        --container api-container \
        -- /opt/app/bin/liquid_voting \
        eval "LiquidVoting.Release.migrate"

  smoke_tests:
    name: Smoke Tests
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        repository: liquidvotingio/deployment
        token: ${{ secrets.DEPLOYMENT_PAT }}
        path: deployment
    - name: Run k6 smoke tests
      uses: k6io/action@v0.1
      env:
        TEST_API_AUTH_KEY: ${{ secrets.TEST_API_AUTH_KEY }}
      with:
        filename: deployment/smoke_tests/smoke_tests.js
    - name: Teardown smoke test data
      if: always()
      env:
        KUBE_CONFIG_DATA: ${{ secrets.LINODE_KUBE_CONFIG }}
      run: |
        echo "$KUBE_CONFIG_DATA" | base64 --decode > /tmp/config
        export KUBECONFIG=/tmp/config
        pod=$(kubectl get pods -l app=api  -o json | jq -r '.items[].metadata.name' | head -1)
        kubectl wait --timeout=120s --for=condition=Ready pod/$pod
        kubectl exec -i pod/$pod \
        --container api-container \
        -- /opt/app/bin/liquid_voting \
        eval "LiquidVoting.Release.smoke_test_teardown"
